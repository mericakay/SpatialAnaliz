<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ilImages.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ilImages.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAACo
        DwAAAk1TRnQBSQFMAgEBBAEAAYgBAAGIAQABEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABIAMAAQEBAAEgBgABIP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8AKgADAgEDAzEBTgNQ
        AZoDWgHNA1kB7QMrAfwDKwH8A1kB7QNaAc0DUAGaAzEBTgMCAQMgAANEAXkDQAH9A0AB/QNDAXgoAANI
        AYYB0wGXAUQB/wHMAZIBQwH/AY8BWgEcAf8kAAMMARACVAFSAaYCVAFSAaYCVAFSAaYCVAFSAaYCVAFS
        AaYCVAFSAaYCVAFSAaYCVAFSAaYCVAFSAaYCVAFSAaYCVAFSAaYCUQFPAZwDAwEECAADHQEpA1oB1QNX
        AcUDPwFtAyQBNQMOARMDAgEDAwIBAwMOARMDJAE1Az8BbQNXAcUDWgHVAx0BKQwAAwkBDAM7AWMDDwEU
        BAADWQHMAyYBOAMmATgDWQHMBAADDwEUAzsBYwMJAQwUAAH4AboBWQH/AfwB7gHYAf8BsgFyAS0B/wGe
        AWMBIwH/AaMBaAEjAf8BogFtASwB/wMuAUcQAANWAbsIAAMoAT0DOQFfAysBQgMvAUoDLwFKAy4BRwMF
        AQcDLgFIAxoBJQMtAUYDHQEpAyQBNQJGAUUBfwMVAR0IAANZAdIDPAFnJAADOwFkAzwBZwNZAdIIAAMJ
        AQwDWQHDA1gBxgNeAeUDSAGHA04B8AMHAQkDBwEJA04B8ANIAYcDXgHlA1gBxgNZAcMDCQEMDAAB9wGk
        AUkB/wHPAZYBPAH/AfQB6wHYAf8B/gH1AdwB/wGNAVQBGQH/AZYBWgEbAf8BmAFeAR8B/wH7AeoB0AH/
        DAADagH/AwAB/wgAAygBPQM4AV4DOAFcAzwBZgM8AWYDOwFjAx4BKwEyAV8B8gH/AlYBWAG2ATIBXwHy
        Af8BVQFWAVcBtAFbAWABaQHUAkYBRQF+AxUBHQgAAyIB/wMAAQEEAAMSARkDMQFNAz8BbQNFAX0DRQF9
        Az8BbQMxAU0DEgEZAzsBZAMAAQEDIgH/CAADOwFjA1kBxwMAAQEDJgE5A0sBjgMiATIIAAMiATIDSwGO
        AyYBOQMAAQEDWQHHAzsBYwwAAcQBlQFAAf8B/QHwAdUB/wH1AfMB6AH/AfsB+AH2Af8BmgFbAR0B/wGm
        AWEBIQH/AagBZAElAf8B7wHnAdgB/wH3AeoB1wH/BAADBgEIAwAB/wOkAf8IAAMoAT0DOAFeA1ABmgNU
        AawDVAGsA1QBpgMfASwBMgFfAfIB/wJWAVgBtgEyAV8B8gH/AVUBVgFXAbQBWwFgAWkB1AJGAUUBfgMV
        AR0IAAMiAf8DLQFGA0oBiwM+AWwDJAE1Aw4BEwMCAQMDAgEDAw4BEwMkATUDPgFsA0oBiwMtAUYDIgH/
        CAADDwEUA14B5QMmATkIAAMcASgDPwFtAz8BbQMcASgIAAMmATkDXgHlAw4BEwgAAcUBjQE9Af8BpAFl
        ASIB/wH2AfMB7wL/AfsB8wH/AZEBWQEtAf8BtAFrASgB/wG8AXQBLwH/AcEBdgE1Af8B8QHtAeQB/wH8
        AeoBzAH/BwAB/wM3Af8MAAMoAT0DOAFeA1EBnANUAa4DVAGuA1MBqAMZASMBUQFkAZQB7AJSAVMBqQEy
        AV8B8gH/AVUBVgFXAbQBWwFgAWkB1AJGAUUBfgMVAR0IAAMiAf8DOwFjJAADOwFkAzsBYwMiAf8MAANI
        AYcDSwGOBAADOQFfAzUBVgMEAQUDBAEFAzUBVgM5AV8EAANLAY4DSAGHDAABpAFnAScB/wFzAUgBDgH/
        AfoB9QHoAf8BjQFUASAB/wGzAWgBJwH/Ac8BggEuAf8B9wHwAe0B/wP9Af8B+AH2AfUB/wHqAeUB2AH/
        AQoBBwEEAf8DHgH/EAADKAE9AzgBXhgAAywBRAFWAlgBuQFTAlQBrAFbAWABaQHUAkYBRQF+AxUBHQgA
        AyIB/wMAAQEEAAMSARkDMQFNAz8BbQNFAX0DRQF9Az8BbQMxAU0DEgEZAzsBZAMAAQEDIgH/BAADQwF4
        A1kBzANOAfADIgEyAx0BKQM1AVYDMQFPA0gBiANIAYgDMQFPAzUBVgMcASgDIgEyA04B8ANZAcwDQwF4
        BAABYwFNARcB/wFjAUUBOgH/AVsBLQEAAf8BqwFdASQB/wHIAXcBLwH/AeQBkwE6Af8B6gHtAfMF/wH5
        AfcB9gH/Ae0B6QHmAf8BDgEQAREB/xQAAygBPQM4AV4DBgEIA0QBegFRAlIBpwM5AV8QAAM9AWkDSgGM
        AkYBRQF+AxUBHQgAAyIB/wMtAUYDSgGLAz4BbAMkATUDDgETAwIBAwMCAQMDDgETAyQBNQM+AWwDSgGL
        Ay0BRgMiAf8EAAMzAf4DJgE4AwcBCQQAAz8BbQMEAQUDSAGICAADSAGIAwQBBQM/AW0EAAMHAQkDJgE4
        AzMB/gQAAeYB3wHVAf8BigFaAUQB/wGNAUsBHgH/Aa8BZQEoAf8B2AGJATQB/wHUAa8BdgH/AesB4AHD
        Af8B7wHrAcsB/wHGAccBxQH/Av4B/QH/AecBzwG9Af8UAAMoAT0DOAFeAVACUQGfATEBmAH4Af8BMQGY
        AfgB/wExAZgB+AH/AzsBZRQAAkYBRQF+AxUBHQgAAyIB/wM7AWMkAAM7AWQDOwFjAyIB/wQAAzMB/gMm
        ATgDBwEJBAADPwFtAwQBBQNIAYgIAANIAYgDBAEFAz8BbQQAAwcBCQMmATgDMwH+BAAB5wHgAdcB/wHx
        Ae4B8wH/AfwC+wH/AbUBagEpAf8B0wGOAToC/wHvAbQB/wH6AekBrAH/AeMB2AGAAf8B9QHYAWYB/wHO
        AcQBswH/AfcB9AHTAf8UAAMoAT0DOAFeAUsBdQGdAe8BMQGYAfgB/wFaAV0BYwHKAVcBXAFfAcUBUQJS
        AaEDEAEVA1UBrQNVAa0DVQGtA0gBhQJGAUUBfgMVAR0IAAMiAf8DAAEBBAADFAEbAzEBTgM/AW0DRQF9
        A0UBfQM/AW0DMQFOAxQBGwM7AWQDAAEBAyIB/wQAA0MBeANZAcwDTgHwAyIBMgMcASgDNQFWAzEBTwNJ
        AYkDSAGIAzEBTgM1AVcDHAEoAyIBMgNOAfADWQHMA0MBeAQAAeYB4QHSAf8B7wHuAe0B/wLsAeMB/wHe
        AasBjwH/AdIB2AHjAf8B+gHtAb4B/wH7AdYBdgH/Af0B+wH+Af8B+wH5AeUB/wH1Ae0B4wH/AcsBcAEr
        Af8UAAMoAT0DOAFeAVoBXQFgAcgBMQGYAfgB/wFWAVgBWQG7AUEBZQHGAfkBUQJSAaEDEAEVA1QBpgNS
        AacDUgGnA0cBgQJGAUUBfgMVAR0IAAMiAf8DNQFYA1oBzQNVAeoDVQG1A0wBkwNHAYIDRwGCA0wBkwNV
        AbUDVQHqA1oBzQM1AVgDIgH/DAADSAGHA0sBjgQAAzkBXwM1AVcDBAEFAwQBBQM1AVcDOQFfBAADSwGO
        A0gBhwwAAewB2AHNAf8B7wHlAdsB/wHfAdYBvAL/AfIB+QH/AfEB4wHPAv8B6AGUAf8B+gHRAXQB/wH+
        Ae0BpwL/AewB3AH/AfkB9gGrAf8YAAMoAT0DOAFeAx0BKgFaAV8BZgHOAVYBWAFZAbsBVQFfAYYB6AMk
        ATUEAAMEAQYDBQEHAwUBBwMDAQQCRgFFAX4DFQEdCAADIgH/A1gB0QMtAUUDAQECGAADAQECAy0BRQNZ
        AdIDIgH/CAADDwEUA14B5QMmATkIAAMcASgDPwFtAz8BbQMcASgIAAMmATkDXgHlAw8BFAwAAeoB3gHW
        Af8BaAE6ARIB/wGUAUQBGgH/AfsB8AHnAf8B8QG/AWgB/wH9AcYBagH/Af4BzgFtAf8B+wHoAZUB/wHk
        AdcBkAH/GAADKAE9AzgBXgMBBAIBAwMYASIDCAELAwABAQMCAQMDCwEPAwsBDwMLAQ8DBQEHAkYBRQF+
        AxUBHQgAAyIB/wMQARYoAAMRARcDIgH/CAADOwFjA1kBxwMAAQEDJgE5A0sBjgMiATIIAAMiATIDSwGO
        AyYBOQMAAQEDWQHHAzsBYwwAAcoBsQGgAf8BTAEqAQ8B/wH5AfAB3wH/AfYB+QHtAf8B4AG2AWoB/wHy
        Ab8BZQL/AfcBwgH/AfoC/AH/AfwB9QH8Af8YAAMoAT0DOAFeA1ABmgNWAasDVgGrA1YBqwNCAXMDIgEy
        A1EBnwNRAZ8DUQGfAzgBXgJGAUUBfgMVAR0IAANZAdIDPAFnKAADPAFnA1kB0ggAAwkBDANZAcMDWQHH
        A14B5QNIAYcDTgHwAwcBCQMHAQkDTgHwA0gBhgNeAeUDWQHHA1kBwwMJAQwQAAHlAdQBqQH/AYUBSgEY
        Af8B8gHtAdsB/wHhAcwBxgH/AfwB8wHYAf8B9AH+AfwB/wHZAcUBgQH/HAADKAE9AzgBXgNKAYwDVAGm
        A1QBpgNUAaYDVAGmA1QBpgNUAaYDVAGmA1QBpgM1AVcCRgFFAX4DFQEdCAADHQEpA1oB1QNXAcUDPwFt
        AyQBNQMOARMDAgEDAwIBAwMOARMDJAE1Az8BbQNXAcUDWgHVAx0BKQwAAwkBDAM7AWMDDgETBAADWQHM
        AyYBOAMmATkDWQHMBAADDwEUAzsBYwMJAQwYAAM4AV0B0wHBAaUB/wHtAeoBzgH/A/0B/wP7Af8gAAMn
        ATsDPQFpAwoBDgMNAREDDQERAw0BEQMNAREDDQERAw0BEQMNAREDDQERAwgBCwJJAUgBiAMUARsMAAMC
        AQMDMQFOA08BmwNaAc0DWQHtAysB/AMrAfwDWQHtA1oBzQNQAZoDMQFOAwIBAyAAA0MBeANAAf0DQAH9
        A0MBeFwAAwYBCANKAYwDUAGdA1ABnQNQAZ0DUAGdA1ABnQNQAZ0DUAGdA1ABnQNQAZ0DUAGdAkYBRQF/
        AwABAQQAAUIBTQE+BwABPgMAASgDAAFAAwABIAMAAQEBAAEBBgABARYAA/+BAAHAAQMB/AE/AfAB/wGA
        AQEBgAEBAcQBIwHgAT0BgAEBAZ8B8QGAAQEBwAE5AYABAQGQAQECgQHAAREBgAEBAYABAQGMATEBgAET
        AYABAQGfAfEByAETAYABBwGfAYEBkAEBAgABgAEPAYEB4QGAAQEBEQGIAYABDwGAAfkBnwHxAREBiAGA
        AQ8BgAEBAZABAQIAAYABDwGAAQEBgAEBAcgBEwGAAR8BgAGBAYcB4QGMATEBwAEfAYABAQGfAfkCgQHA
        AR8BgAEBAZ8B+QGAAQEB4AE/AYABAQGAAQEBxAEjAfABfwGAAQEBwAEDAfwBPwL/AYABAQs=
</value>
  </data>
</root>